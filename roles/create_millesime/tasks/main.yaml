---
- include_vars: vault.yaml
- name: Create directories
  file:
    path: "{{ item }}"
    state: directory
    owner: redadeg
    group: redadeg
  loop:
    - "/data/{{ millesime }}"
    - "/data/{{ millesime }}/backup"
- name: Be sure that postgresql is installed
  become: true
  apt:
    name: postgresql-postgis, postgresql-pgrouting
    state: present
- name: Change postgres local authentication
  become: true
  community.postgresql.postgresql_pg_hba:
    dest: /etc/postgresql/16/main/pg_hba.conf
    contype: local
    users: all
    databases: all
    method: scram-sha-256
    address: ""
    netmask: ""
- name: Activate and enable postgresql
  become: true
  systemd_service:
    name: postgresql.service
    enabled: true
    state: restarted
# -----------------------
# Postgresql role
- name: Create postgres role
  become: true
  become_user: postgres
  community.postgresql.postgresql_user:
    name: "{{ db_user }}"
    password: "{{ db_password }}"
    role_attr_flags: "SUPERUSER,CREATEDB,NOCREATEROLE,NOINHERIT,LOGIN,NOREPLICATION,NOBYPASSRLS"
    state: present
# -----------------------
# Postgresql database and extensions
- name: Drop database if it exists
  community.postgresql.postgresql_db:
    name: "{{ db_name }}"
    state: absent
    force: true
    login_user: "{{ db_user }}"
    login_password: "{{ db_password }}"
  when: drop_db == true
- name: Create a database
  community.postgresql.postgresql_db:
    name: "{{ db_name }}"
    owner: "{{ db_user }}"
    encoding: UTF-8
    login_user: "{{ db_user }}"
    login_password: "{{ db_password }}"
- name: Add postgis extensions
  community.postgresql.postgresql_ext:
    name: "{{ item }}"
    db: "{{ db_name }}"
    login_user: "{{ db_user }}"
    login_password: "{{ db_password }}"
  loop:
    - postgis
    - postgis_topology
    - pgrouting
- name: Set owner to public schema
  community.postgresql.postgresql_schema:
    db: "{{ db_name }}"
    name: public
    owner: "{{ db_user }}"
    login_user: "{{ db_user }}"
    login_password: "{{ db_password }}"
- name: Set owner to topology table
  community.postgresql.postgresql_table:
    db: "{{ db_name }}"
    name: "{{ item }}"
    owner: "{{ db_user }}"
    login_user: "{{ db_user }}"
    login_password: "{{ db_password }}"
  loop:
    - topology.layer
    - topology.topology
